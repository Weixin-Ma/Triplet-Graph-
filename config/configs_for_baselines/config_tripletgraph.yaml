# This file is covered by the LICENSE file in the root of this project.
ref_related:    
  frames_interval: 5 
query_related:
  frames_interval: 10  
metric_para:
  RRE_thr: 10
  RTE_thr: 7.5 
tripletgraph_para:
  omp_num_threads_ransc: 12
  omp_num_threads_vertex_match: 8
  ins_fuse_radius: 0.5             # keep consistence with instance cluster result as tripletloc 
  angel_resolution: 5              # i.e., \theta
  edge_dis_thr: 20                 # i.e., \tau_{edge}
  max_iterations_ransac: 4000      # 10000 for results in original Triplet-Graph paper (100 could be faster, performance might degard)
  percentage_matches_used: 0.3     #sample rate for RANSAC
  ransac_threshold: 0.8            #threshold for RANSAC, for indenfying inlier and outlier
  cere_opt_iterations_max: 1000     
  project_select_thresold: 0.8     #threshold for projection-based selection operation  
  top_k_candidates: 50             #top k candidates based on the global descriptor similarity, -1: compare with all
  top_k_search_method: 1           #0: brute-force, 1: kd-tree(simpilified version of Eq.(2) in Triple-Graph paper, i.e., top-k by normalized cocatenated global descriptor)
omp_num_threads_knn: 8
labels: 
  0 : "car"
  1 : "bicycle"
  2 : "motorcycle"
  3 : "truck"
  4 : "other-vehicle"
  5 : "person"
  6 : "bicyclist"
  7 : "motorcyclist"
  8 : "road"
  9 : "parking"
  10: "sidewalk"
  11: "other-ground"
  12: "building"
  13: "fence"
  14: "vegetation"
  15: "trunk"
  16: "terrain"
  17: "pole"
  18: "traffic-sign"
classes_for_graph:        # False: not-used, True:used, 
  0 : False        #"car"
  1 : False        #"bicycle"
  2 : False        #"motorcycle"
  3 : False        #"truck"
  4 : False        #"other-vehicle"
  5 : False        #"person"
  6 : False        #"bicyclist"
  7 : False        #"motorcyclist"
  8 : False        #"road"
  9 : True #False  #"parking"
  10: True #True   #"sidewalk"
  11: False        #"other-ground"
  12: True         #"building"
  13: True #True   #"fence"
  14: True #True   #"vegetation"
  15: True #True   #"trunk"
  16: False        #"terrain"
  17: True #True   #"pole"
  18: True #True   #"traffic-sign"
voxel_leaf_size:
  0 : 0.1        #"car"
  1 : 0.05        #"bicycle"
  2 : 0.1        #"motorcycle"
  3 : 0.1        #"truck"
  4 : 0.1        #"other-vehicle"
  5 : 0.05        #"person"
  6 : 0.05        #"bicyclist"
  7 : 0.05        #"motorcyclist"
  8 : 0.2        #"road"
  9 : 0.2        #"parking"
  10: 0.2        #"sidewalk"
  11: 0.1        #"other-ground"
  12: 0.2        #"building"
  13: 0.05        #"fence"
  14: 0.2        #"vegetation"
  15: 0.05        #"trunk"
  16: 0.5        #"terrain"
  17: 0.05        #"pole"
  18: 0.05        #"traffic-sign"
instance_seg_para:     
  0 : 0.5        #"car"
  1 : 0.1        #"bicycle"
  2 : 0.1        #"motorcycle"
  3 : 0.1        #"truck"
  4 : 0.1        #"other-vehicle"
  5 : 0.5        #"person"
  6 : 0.1        #"bicyclist"
  7 : 0.1        #"motorcyclist"
  8 : 0.1        #"road"
  9 : 0.5        #"parking"
  10: 0.5        #"sidewalk"
  11: 0.1        #"other-ground"
  12: 1.0        #"building"
  13: 0.5        #"fence"
  14: 0.5        #"vegetation"
  15: 0.5        #"trunk"
  16: 0.5        #"terrain"
  17: 0.5        #"pole"
  18: 0.5        #"traffic-sign"
mini_point_one_instance:      
  0 : 80         #"car"
  1 : 10         #"bicycle"
  2 : 10         #"motorcycle"
  3 : 10         #"truck"
  4 : 10         #"other-vehicle"
  5 : 10         #"person"
  6 : 10         #"bicyclist"
  7 : 10         #"motorcyclist"
  8 : 10         #"road"
  9 : 80         #"parking"
  10: 200        #"sidewalk"
  11: 10         #"other-ground"
  12: 300        #"building"
  13: 40         #"fence"
  14: 200        #"vegetation"
  15: 20         #"trunk"
  16: 10         #"terrain"
  17: 20         #"pole"
  18: 20         #"traffic-sign"
color_map: # bgr
  0 : [245, 150, 100]  #"car"
  1 : [245, 230, 100]  #"bicycle"
  2 : [150, 60, 30]    #"motorcycle"
  3 : [180, 30, 80]    #"truck"
  4 : [255, 0, 0]      #"other-vehicle"
  5 : [30, 30, 255]    #"person"
  6 : [200, 40, 255]   #"bicyclist"
  7 : [90, 30, 150]    #"motorcyclist"
  8 : [255, 0, 255]    #"road"
  9 : [255, 150, 255]  #"parking"
  10: [75, 0, 75]      #"sidewalk"
  11: [75, 0, 175]     #"other-ground"
  12: [0, 200, 255]    #"building"
  13: [50, 120, 255]   #"fence"
  14: [0, 175, 0]      #"vegetation"
  15: [0, 60, 135]     #"trunk"
  16: [80, 240, 150]   #"terrain"
  17: [150, 240, 255]  #"pole"
  18: [0, 0, 255]      #"traffic-sign"
weights_for_cere_cost:    #weights for different class, when using cere minimizing total projection error. We simply all use 1.0.         
  0 : 1.0        #"car"
  1 : 1.0        #"bicycle"
  2 : 1.0        #"motorcycle"
  3 : 1.0        #"truck"
  4 : 1.0        #"other-vehicle"
  5 : 1.0        #"person"
  6 : 1.0        #"bicyclist"
  7 : 1.0        #"motorcyclist"
  8 : 1.0        #"road"
  9 : 1.0        #"parking"
  10: 1.0        #"sidewalk"
  11: 1.0        #"other-ground"
  12: 1.0        #"building"
  13: 1.0        #"fence"
  14: 1.0        #"vegetation"
  15: 1.0        #"trunk"
  16: 1.0        #"terrain"
  17: 1.0        #"pole"
  18: 1.0        #"traffic-sign"
weights_for_class:      #weights for different class. When all equal to 1.0, we have Eq.(2)               
  0 : 1.0        #"car"
  1 : 1.0        #"bicycle"
  2 : 1.0        #"motorcycle"
  3 : 1.0        #"truck"
  4 : 1.0        #"other-vehicle"
  5 : 1.0        #"person"
  6 : 1.0        #"bicyclist"
  7 : 1.0        #"motorcyclist"
  8 : 1.0        #"road"
  9 : 1.0        #"parking"
  10: 1.0        #"sidewalk"
  11: 1.0        #"other-ground"
  12: 1.0        #"building"
  13: 1.0        #"fence"
  14: 1.0        #"vegetation"
  15: 1.0        #"trunk"
  16: 1.0        #"terrain"
  17: 1.0        #"pole"
  18: 1.0        #"traffic-sign"